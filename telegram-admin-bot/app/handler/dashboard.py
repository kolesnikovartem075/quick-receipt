from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from app.client.APIClient import fetch_account, fetch_user
from app.keyboard import dashboard_keyboard

# Create admin router
dashboard_router = Router()


class AdminStates(StatesGroup):
    """States for admin actions"""
    start = State()
    account_contact_entry = State()


# User identification and main menu
@dashboard_router.message(CommandStart())
async def admin_start(message: Message, state: FSMContext):
    """Admin bot entry point - identify user and show main menu"""
    admin_user = await fetch_user(message.from_user.id)
    account_data = await fetch_account(admin_user.account_id)

    if not admin_user or not account_data:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –∞–∫–∫–∞—É–Ω—Ç—É.")
        return

    await state.update_data(
        user_id=admin_user.id,
        account_id=account_data.id,
    )

    # Welcome admin with main menu
    await message.answer(
        f"üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ê–¥–º—ñ–Ω-–±–æ—Ç–∞, {message.from_user.first_name}!\n\n"
        f"üìä –ê–∫–∫–∞—É–Ω—Ç: {account_data.name} ({account_data.nickname})\n"
        f"üîë –í–∞—à–∞ —Ä–æ–ª—å: {admin_user.role}\n"
        f"–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
        reply_markup=dashboard_keyboard.main_menu
    )

    await state.set_state(AdminStates.start)


# Main menu handlers - just the basic navigation
@dashboard_router.callback_query(F.data == "manage_account_contacts")
async def manage_account_contacts(callback: CallbackQuery, state: FSMContext):
    """Entry point for account contact management"""
    await callback.answer()

    await callback.message.edit_text(
        f"üìá –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        f"–ó–≤—ñ–¥—Å–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∑ API-–∫–ª—é—á–µ–º –∞–±–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ.\n\n"
        f"–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=dashboard_keyboard.account_contact_menu
    )


@dashboard_router.callback_query(F.data == "manage_orders")
async def manage_orders(callback: CallbackQuery):
    """Entry point for order management"""
    await callback.answer()

    await callback.message.edit_text(
        "üì¶ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏\n\n"
        "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏, –ø—Ä–∏–π–º–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ —Ç–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–∞–∫–ª–∞–¥–Ω—ñ.\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=dashboard_keyboard.order_menu
    )


@dashboard_router.callback_query(F.data == "manage_users")
async def manage_users(callback: CallbackQuery):
    """Entry point for user management"""
    await callback.answer()

    await callback.message.edit_text(
        "üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏\n\n"
        "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=dashboard_keyboard.user_menu
    )


@dashboard_router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """Return to main menu"""
    await callback.answer()

    # Get stored user and account info
    data = await state.get_data()

    await callback.message.edit_text(
        f"üìä –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        f"–ê–∫–∫–∞—É–Ω—Ç: {data.get('account_name')} ({data.get('account_nickname')})\n"
        f"–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
        reply_markup=dashboard_keyboard.main_menu
    )

    await state.set_state(AdminStates.start)


# Entry point for account contact creation - just a placeholder
@dashboard_router.callback_query(F.data == "add_account_contact")
async def add_account_contact(callback: CallbackQuery, state: FSMContext):
    """Entry point for creating a new account contact with API key"""
    await callback.answer()

    await callback.message.edit_text(
        "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        "–î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –∑ API-–∫–ª—é—á–µ–º.\n"
        "–¶–µ–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –∫—Ä–æ—Ü—ñ.",
        reply_markup=dashboard_keyboard.back_to_account_contacts
    )

    # Set state for account contact creation
    await state.set_state(AdminStates.account_contact_entry)
