from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from app.keyboard.settings_keyboard import (
    settings_menu,
    back_to_settings,
    api_settings_menu,
    notification_settings_menu,
    admin_management_menu
)

# Create settings router
settings_router = Router()


class APISettings(StatesGroup):
    waiting_for_api_url = State()
    waiting_for_api_key = State()


@settings_router.callback_query(F.data == "settings")
async def settings_menu_handler(callback: CallbackQuery):
    text = (
        "‚öôÔ∏è *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è* \n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:"
    )

    await callback.message.edit_text(text, reply_markup=settings_menu, parse_mode="Markdown")
    await callback.answer()


@settings_router.callback_query(F.data == "api_settings")
async def api_settings_handler(callback: CallbackQuery):
    # Get current API settings
    # api_config = await get_api_config()

    # Mock data
    api_config = {
        "api_url": "http://localhost:8081/api/v1",
        "nova_poshta_key": "********"
    }

    text = (
        "üîë *API –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è* \n\n"
        f"API URL: {api_config['api_url']}\n"
        f"–ö–ª—é—á –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏: {api_config['nova_poshta_key']}\n"
    )

    await callback.message.edit_text(text, reply_markup=api_settings_menu, parse_mode="Markdown")
    await callback.answer()


@settings_router.callback_query(F.data == "notification_settings")
async def notification_settings_handler(callback: CallbackQuery):
    text = (
        "üîî *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å* \n\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:\n"
        "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
        "‚úÖ –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
        "‚ùå –†–µ–≥—É–ª—è—Ä–Ω—ñ –Ω–æ–≤–∏–Ω–∏\n"
    )

    await callback.message.edit_text(text, reply_markup=notification_settings_menu, parse_mode="Markdown")
    await callback.answer()


@settings_router.callback_query(F.data == "admin_management")
async def admin_management_handler(callback: CallbackQuery):
    # Get current admins
    # admins = await get_admins()

    # Mock data
    admins = [
        {"id": 123456789, "name": "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä 1"},
        {"id": 987654321, "name": "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä 2"}
    ]

    text = "üë§ *–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏* \n\n"

    for admin in admins:
        text += f"‚Ä¢ {admin['name']} (ID: {admin['id']})\n"

    await callback.message.edit_text(text, reply_markup=admin_management_menu, parse_mode="Markdown")
    await callback.answer()


@settings_router.callback_query(F.data == "change_api_url")
async def change_api_url_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(APISettings.waiting_for_api_url)

    text = "üîÑ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π API URL:"

    await callback.message.edit_text(text)
    await callback.answer()


@settings_router.message(APISettings.waiting_for_api_url)
async def process_api_url(message: Message, state: FSMContext):
    api_url = message.text

    if not api_url.startswith(("http://", "https://")):
        await message.answer("‚ùå URL –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ http:// –∞–±–æ https://")
        return

    # Call API to update API URL
    # success = await update_api_url(api_url)
    success = True  # Mock response

    if success:
        text = f"‚úÖ API URL —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {api_url}"
    else:
        text = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ API URL"

    await message.answer(text, reply_markup=back_to_settings)
    await state.clear()


@settings_router.callback_query(F.data == "list_admins")
async def list_admins(callback: CallbackQuery):
    # Get current admins
    # admins = await get_admins()

    # Mock data
    admins = [
        {"id": 123456789, "name": "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä 1"},
        {"id": 987654321, "name": "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä 2"}
    ]

    text = "üë§ *–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤* \n\n"

    if admins:
        for admin in admins:
            text += f"‚Ä¢ {admin['name']} (ID: {admin['id']})\n"
    else:
        text += "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    await callback.message.edit_text(text, reply_markup=admin_management_menu, parse_mode="Markdown")
    await callback.answer()


@settings_router.callback_query(F.data == "add_admin")
async def add_admin_start(callback: CallbackQuery, state: FSMContext):
    text = "üë§ –ü–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:"

    await callback.message.edit_text(text)
    await callback.answer()
