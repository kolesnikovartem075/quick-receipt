from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from app.keyboard.main_keyboard import admin_main_reply_keyboard, add_main_keyboard
from app.keyboard.sender_keyboard import (
    sender_management_menu,
    sender_details_menu,
    create_sender_selection_menu,
    cancel_sender_creation,
    confirm_delete_sender
)

# Create sender router
sender_router = Router()


class SenderCreate(StatesGroup):
    """States for service sender creation flow"""
    name = State()
    phone = State()
    city = State()
    address = State()
    contact_person = State()
    confirmation = State()


@sender_router.callback_query(F.data == "sender_management")
async def sender_management(callback: CallbackQuery):
    """Show sender management menu"""
    text = (
        "üë®‚Äçüíº *–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞–º–∏* \n\n"
        "–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö. "
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    )

    await callback.message.edit_text(text, reply_markup=sender_management_menu, parse_mode="Markdown")
    await callback.answer()


@sender_router.callback_query(F.data == "create_sender")
async def create_sender_start(callback: CallbackQuery, state: FSMContext):
    """Start service sender creation process"""
    await state.set_state(SenderCreate.name)

    text = add_main_keyboard(
        "üìù *–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞* \n\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ –∞–±–æ –∫–æ–º–ø–∞–Ω—ñ—ó:"
    )

    await callback.message.edit_text(text, reply_markup=cancel_sender_creation, parse_mode="Markdown")
    # Show main reply keyboard
    await callback.message.answer("–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏'", reply_markup=admin_main_reply_keyboard)
    await callback.answer()


@sender_router.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
@sender_router.callback_query(F.data == "cancel_sender_creation")
async def cancel_creation(message_or_callback, state: FSMContext):
    """Cancel sender creation process"""
    current_state = await state.get_state()

    if current_state is None:
        # No active state, ignore
        return

    await state.clear()

    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(
            "‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=sender_management_menu
        )
        await message_or_callback.answer()
    else:
        await message_or_callback.answer(
            "‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=sender_management_menu
        )


@sender_router.message(SenderCreate.name)
async def process_sender_name(message: Message, state: FSMContext):
    """Process sender name input"""
    await state.update_data(name=message.text)
    await state.set_state(SenderCreate.phone)

    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞:")


@sender_router.message(SenderCreate.phone)
async def process_sender_phone(message: Message, state: FSMContext):
    """Process sender phone input"""
    # Basic phone validation
    phone = message.text.strip()

    # Simplified validation, you might want more comprehensive checks
    if not (phone.startswith('+') and len(phone) >= 10 and phone.replace('+', '').isdigit()):
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380XXXXXXXXX):")
        return

    await state.update_data(phone=phone)
    await state.set_state(SenderCreate.city)

    await message.answer("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞:")


@sender_router.message(SenderCreate.city)
async def process_sender_city(message: Message, state: FSMContext):
    """Process sender city input"""
    await state.update_data(city=message.text)
    await state.set_state(SenderCreate.address)

    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞:")


@sender_router.message(SenderCreate.address)
async def process_sender_address(message: Message, state: FSMContext):
    """Process sender address input"""
    await state.update_data(address=message.text)
    await state.set_state(SenderCreate.contact_person)

    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó –æ—Å–æ–±–∏:")


@sender_router.message(SenderCreate.contact_person)
async def process_contact_person(message: Message, state: FSMContext):
    """Process contact person input and show confirmation"""
    await state.update_data(contact_person=message.text)
    await state.set_state(SenderCreate.confirmation)

    data = await state.get_data()

    confirmation_text = (
        "üìã *–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞* \n\n"
        f"–ù–∞–∑–≤–∞: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ú—ñ—Å—Ç–æ: {data['city']}\n"
        f"–ê–¥—Ä–µ—Å–∞: {data['address']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞: {data['contact_person']}\n\n"
        "–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞."
    )

    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_sender"),
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_sender_creation")
        ]
    ])

    await message.answer(confirmation_text, reply_markup=confirm_keyboard, parse_mode="Markdown")


@sender_router.callback_query(SenderCreate.confirmation, F.data == "confirm_sender")
async def confirm_sender_creation(callback: CallbackQuery, state: FSMContext):
    """Process sender confirmation and create service sender in database"""
    data = await state.get_data()

    # Create service_sender object for API call
    service_sender = {
        "name": data['name'],
        "phone": data['phone'],
        "city": data['city'],
        "address": data['address'],
        "contactPerson": data['contact_person']
    }

    # Call API to create service sender
    # result = await create_service_sender(service_sender)

    # For demonstration, mock the API call
    # In production, you would call your actual API
    sender_id = 123  # This would come from the API response
    success = True  # This would be based on API response

    if success:
        await callback.message.edit_text(
            f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ \"{data['name']}\" —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö.",
            reply_markup=sender_management_menu
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=sender_management_menu
        )

    await state.clear()
    await callback.answer()


@sender_router.callback_query(F.data == "list_senders")
async def list_senders(callback: CallbackQuery):
    """List all service senders"""
    # Call API to get service senders
    # senders = await get_service_senders()

    # Mock data for demonstration
    senders = [
        {"id": 1, "name": "–¢–û–í –†–æ–≥–∞ —ñ –ö–æ–ø–∏—Ç–∞", "phone": "+380991234567"},
        {"id": 2, "name": "–§–û–ü –Ü–≤–∞–Ω–æ–≤", "phone": "+380671234567"}
    ]

    text = "üìã *–°–ø–∏—Å–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫—ñ–≤ –¥–ª—è –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö* \n\n"

    if not senders:
        text += "–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫—ñ–≤."
        await callback.message.edit_text(text, reply_markup=sender_management_menu, parse_mode="Markdown")
    else:
        await callback.message.edit_text(text, reply_markup=create_sender_selection_menu(senders),
                                         parse_mode="Markdown")

    await callback.answer()


@sender_router.callback_query(F.data.startswith("view_sender_"))
async def view_sender(callback: CallbackQuery):
    """View service sender details"""
    sender_id = int(callback.data.split("_")[-1])

    # Call API to get service sender details
    # sender = await get_service_sender_by_id(sender_id)

    # Mock data for demonstration
    sender = {
        "id": sender_id,
        "name": "–¢–û–í –†–æ–≥–∞ —ñ –ö–æ–ø–∏—Ç–∞" if sender_id == 1 else "–§–û–ü –Ü–≤–∞–Ω–æ–≤",
        "phone": "+380991234567" if sender_id == 1 else "+380671234567",
        "city": "–ö–∏—ó–≤",
        "address": "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1",
        "contactPerson": "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"
    }

    text = (
        f"üë®‚Äçüíº *–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞* \n\n"
        f"–ù–∞–∑–≤–∞: {sender['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {sender['phone']}\n"
        f"–ú—ñ—Å—Ç–æ: {sender['city']}\n"
        f"–ê–¥—Ä–µ—Å–∞: {sender['address']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞: {sender['contactPerson']}\n"
    )

    await callback.message.edit_text(text, reply_markup=sender_details_menu(sender_id), parse_mode="Markdown")
    await callback.answer()


@sender_router.callback_query(F.data.startswith("delete_sender_"))
async def delete_sender_confirmation(callback: CallbackQuery):
    """Show delete confirmation for service sender"""
    sender_id = int(callback.data.split("_")[-1])

    text = (
        "üóëÔ∏è *–í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞* \n\n"
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞? "
        "–¶—è –¥—ñ—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.\n\n"
        "‚ö†Ô∏è –£–≤–∞–≥–∞: –Ø–∫—â–æ —Ü–µ–π –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —É –∞–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö, "
        "–π–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–æ–∂–µ —Å–ø—Ä–∏—á–∏–Ω–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏."
    )

    await callback.message.edit_text(text, reply_markup=confirm_delete_sender(sender_id), parse_mode="Markdown")
    await callback.answer()


@sender_router.callback_query(F.data.startswith("confirm_delete_sender_"))
async def confirm_delete_sender_handler(callback: CallbackQuery):
    """Process service sender deletion confirmation"""
    sender_id = int(callback.data.split("_")[-1])

    # Call API to delete service sender
    # success = await delete_service_sender(sender_id)

    # For demonstration, mock the API call
    success = True

    if success:
        await callback.message.edit_text(
            "‚úÖ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.",
            reply_markup=sender_management_menu
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö.",
            reply_markup=sender_management_menu
        )

    await callback.answer()


@sender_router.callback_query(F.data.startswith("edit_sender_"))
async def edit_sender_start(callback: CallbackQuery, state: FSMContext):
    """Start editing service sender"""
    sender_id = int(callback.data.split("_")[-1])

    # Call API to get service sender details
    # sender = await get_service_sender_by_id(sender_id)

    # Mock data for demonstration
    sender = {
        "id": sender_id,
        "name": "–¢–û–í –†–æ–≥–∞ —ñ –ö–æ–ø–∏—Ç–∞" if sender_id == 1 else "–§–û–ü –Ü–≤–∞–Ω–æ–≤",
        "phone": "+380991234567" if sender_id == 1 else "+380671234567",
        "city": "–ö–∏—ó–≤",
        "address": "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1",
        "contactPerson": "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"
    }

    # Store existing data and sender ID
    await state.update_data(
        sender_id=sender_id,
        name=sender["name"],
        phone=sender["phone"],
        city=sender["city"],
        address=sender["address"],
        contact_person=sender["contactPerson"]
    )

    # Start edit flow
    await state.set_state(SenderCreate.name)

    text = (
        "‚úèÔ∏è *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞* \n\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ –∞–±–æ –∫–æ–º–ø–∞–Ω—ñ—ó "
        f"(–ø–æ—Ç–æ—á–Ω–∞: {sender['name']}):"
    )

    cancel_edit = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", callback_data=f"view_sender_{sender_id}")]
    ])

    await callback.message.edit_text(text, reply_markup=cancel_edit, parse_mode="Markdown")
    await callback.answer()


@sender_router.message(F.text == "üë®‚Äçüíº –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∏")
async def sender_management_from_reply(message: Message):
    """Handle sender management from reply keyboard"""
    text = (
        "üë®‚Äçüíº *–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞–º–∏* \n\n"
        "–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö. "
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    )

    await message.answer(text, reply_markup=sender_management_menu, parse_mode="Markdown")
