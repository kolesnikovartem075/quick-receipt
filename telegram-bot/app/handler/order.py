from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from app.dto.user import UserReadDto
from app.user_confirmation import order_confirmation

order_router = Router()


class Order(StatesGroup):
    waiting_for_description = State()


async def show_user_details(message: Message, user: UserReadDto, state: FSMContext):
    text = (
        "üìã *–í–∞—à—ñ –¥–∞–Ω—ñ:* \n\n"
        f"üë§ –Ü–º'—è: {user.first_name}\n"
        f"üë§ –ü—Ä—ñ–∑–≤–∏—â–µ: {user.last_name}\n"
        f"üìç –ú—ñ—Å—Ç–æ: {user.post_office.city_description}\n"
        f"üè¢ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏: {user.post_office.description}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n\n"
        "–î–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ) –∞–±–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
    )
    await message.answer(text, reply_markup=order_confirmation, parse_mode="Markdown")
    await state.set_state(Order.waiting_for_description)


@order_router.message(Order.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("‚úÖ –û–ø–∏—Å –¥–æ–¥–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\".", reply_markup=order_confirmation)


@order_router.callback_query(F.data == 'confirm_order')
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    description = data.get("description", "–ë–µ–∑ –æ–ø–∏—Å—É")

    order_id = 12345

    text = (
        f"üéâ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\nüÜî –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_id}\nüìù –û–ø–∏—Å: {description}\n\n"
        "–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó."
    )

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(text)
    await state.clear()
