import re
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from app.client.APIClient import create_user_contact, fetch_user, fetch_cities, fetch_warehouses
from app.keyboard.keyboard import (
    inline_cities,
    inline_warehouses
)

register_router = Router()


class Register(StatesGroup):
    telegram_id = State()
    first_name = State()
    last_name = State()
    number = State()
    city = State()
    city_ref = State()
    nova_post_address = State()
    warehouse_ref = State()
    message_id = State()


@register_router.callback_query(F.data == 'register')
async def start_registration(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    await state.update_data(telegram_id=user_id)
    await state.set_state(Register.first_name)

    await callback.answer("–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ –≤–∞—Å!")
    await update_registration_message(callback.message, state)
    await callback.message.answer('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º º—è:')


@register_router.message(Register.first_name)
async def first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await state.set_state(Register.last_name)

    await update_registration_message(message, state)
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ:')


@register_router.message(Register.last_name)
async def last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await state.set_state(Register.city)

    await update_registration_message(message, state)
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ:')


@register_router.message(Register.city)
async def city_input(message: Message, state: FSMContext):
    cities = await fetch_cities(message.text)

    if not cities or len(cities) == 0:
        await message.answer('‚ùå –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞:')
        return

    if len(cities) == 1:
        city = cities[0]
        await set_city(message, state, city.description, city.ref)
    else:
        keyboard = inline_cities(cities[:10])
        await message.answer('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É:', reply_markup=keyboard)


@register_router.callback_query(lambda c: c.data.startswith('city_'))
async def city_selection(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split('|')

    if len(parts) != 2:
        await callback.message.answer('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –º—ñ—Å—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        await callback.answer()
        return

    city_ref = parts[0].split('_')[1]
    city_description = parts[1]

    await callback.message.delete()
    await callback.answer()

    await set_city(callback.message, state, city_description, city_ref)


@register_router.message(Register.nova_post_address)
async def process_nova_post_address(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get('city_ref'):
        await message.answer('‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –º—ñ—Å—Ç–æ. –ü–æ—á–Ω—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–Ω–æ–≤—É.')
        await state.clear()
        return

    warehouse_request = {
        "cityRef": data.get('city_ref'),
        "findByString": message.text
    }

    warehouses = await fetch_warehouses(warehouse_request)

    if not warehouses or len(warehouses) == 0:
        await message.answer('‚ùå –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à–∏–π –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É:')
        return

    if len(warehouses) == 1:
        await set_warehouse(message, state, warehouses[0])
    else:
        keyboard = inline_warehouses(warehouses[:5])
        await message.answer('–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:', reply_markup=keyboard)


@register_router.callback_query(lambda c: c.data.startswith('warehouse_'))
async def process_warehouse_selection(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    parts = callback.data.split('|')
    warehouse_ref = parts[0].split('_')[1]

    warehouse_request = {
        "cityRef": data.get('city_ref'),
        "ref": warehouse_ref
    }

    warehouses = await fetch_warehouses(warehouse_request)

    if not warehouses or len(warehouses) != 1:
        await callback.message.answer('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        await callback.answer()
        return

    await callback.message.delete()
    await callback.answer()

    await set_warehouse(callback.message, state, warehouses[0])


@register_router.callback_query(F.data == 'confirm_nova_post')
async def confirm_nova_post(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.set_state(Register.number)
    await callback.answer()

    await update_registration_message(callback.message, state)
    await callback.message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:')


@register_router.callback_query(F.data == 'retry_nova_post')
async def retry_nova_post(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.set_state(Register.nova_post_address)
    await callback.message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:')
    await callback.answer()


@register_router.message(Register.number)
async def phone_number(message: Message, state: FSMContext):
    phone_number = message.text.strip()
    phone_pattern = r'^\+?[0-9]{10,13}$'

    if not re.match(phone_pattern, phone_number):
        await message.answer('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX –∞–±–æ 0XXXXXXXXX:')
        return

    await state.update_data(number=phone_number)
    await complete_registration(message, state)


async def complete_registration(message: Message, state: FSMContext):
    """Create user contact and complete registration process"""
    data = await state.get_data()


    user = await fetch_user(data["telegram_id"])

    contact_data = await create_contact_payload(data)
    response = await create_user_contact(user.id, contact_data)

    if response.status_code == 201:
        await message.answer(
            f"‚úÖ *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
            f"üë§ –Ü–º º—è: {data['first_name']}\n"
            f"üë§ –ü—Ä–∏–∑–≤–∏—â–µ: {data['last_name']}\n"
            f"üìç –ú—ñ—Å—Ç–æ: {data['city']}\n"
            f"üè¢ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏: {data['nova_post_address']}\n"
            f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {data['number']}\n"
            "–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!",
            parse_mode="Markdown"
        )
    else:
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    await state.clear()


async def create_contact_payload(data):
    contact_data = {
        "contactCreateEditDto": {
            "firstName": data["first_name"],
            "lastName": data["last_name"],
            "phoneNumber": data["number"],
            "cityRef": data["city_ref"],
            "warehouseRef": data["warehouse_ref"],
        }
    }
    return contact_data


# Helper functions for registration flow
async def set_city(message, state, city_description, city_ref):
    """Set city data and move to warehouse selection"""
    await state.update_data(city=city_description)
    await state.update_data(city_ref=city_ref)
    await state.set_state(Register.nova_post_address)

    await update_registration_message(message, state)
    await message.answer(
        f'–û–±—Ä–∞–Ω–æ –º—ñ—Å—Ç–æ: {city_description}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:'
    )


async def set_warehouse(message, state, warehouse):
    """Set warehouse data and ask for confirmation"""
    await state.update_data(nova_post_address=warehouse.description)
    await state.update_data(warehouse_ref=warehouse.ref)

    await message.answer(
        f"–í–∞—à–µ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {warehouse.description}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏?",
        reply_markup=inline_warehouses
    )


async def update_registration_message(message: Message, state: FSMContext):
    data = await state.get_data()

    text = (
        "üìã *–í–∞—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:* \n\n"
        f"üë§ –Ü–º'—è: {data.get('first_name', '‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üë§ –ü—Ä–∏–∑–≤–∏—â–µ: {data.get('last_name', '‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìç –ú—ñ—Å—Ç–æ: {data.get('city', '‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üè¢ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏: {data.get('nova_post_address', '‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('number', '‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n\n"
    )

    message_id = data.get("message_id")
    if message_id:
        await message.bot.edit_message_text(text, chat_id=message.chat.id, message_id=int(message_id),
                                            parse_mode="Markdown")
    else:
        new_message = await message.answer(text, parse_mode="Markdown")
        await state.update_data(message_id=new_message.message_id)
